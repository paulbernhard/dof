% DOF Base

% convert sharp values
define_pixels(u,cap,desc,xheight,s,ygap,overdraw,velocity,expand,accdist,accwidth,accheight);
define_corrected_pixels(o);
define_blacker_pixels(penx,peny);
pickup pencircle xscaled penx yscaled peny rotated penangle; round_pen:=savepen;
define_good_y_pixels(barheight,ebarheight);
define_good_x_pixels(leftstemloc);

% dof char method
def begindofchar(expr code,width_in_units,height,desc,s_correction) = 
  % set character dimensions: width in u, height, descender, correction for sidebearings
  beginchar(code,width_in_units*u#+2*s#+s_correction,height,desc);
  pickup round_pen; enddef;

% super-quarter method
def super_arc(suffix i,j) = 
  draw z.i{0,y.j-y.i}
  ... (superness[x.j,x.i],superness[y.i,y.j]){z.j-z.i}
  ... z.j enddef;

% horizontal super-half method
def super_half(suffix i,j,k) =
  draw z.i{0,y.j-y.i}
  ... (superness[x.j,x.i],superness[y.i,y.j]){z.j-z.i}
  ... z.j{x.k-x.i,0}
  ... (superness[x.j,x.k],superness[y.k,y.j]){z.k-z.j}
  ... z.k{0,y.k-y.j} enddef;

% vertical super-half method
def super_crescent(suffix i,j,k) =
  draw z.i{x.j-x.i,0}
  ... (superness[x.i,x.j],superness[y.j,y.i]){z.j-z.i}
  ... z.j{0,y.k-y.i}
  ... (superness[x.k,x.j],superness[y.j,y.k]){z.k-z.j}
  ... z.k{x.k-x.j,0} enddef;

% set global slant
if unknown slant: slant:=0 else: currenttransform:=
  identity slanted slant fi;

% draw characters
input dofl; % lower case
input dofu; % upper case
input dofd; % digits
input dofspl; % special lower case
input dofspu; % special lower case
input dofsym; % symbols
input dofp; % punctuation
input dofacc; % accents

bye