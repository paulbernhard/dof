font_size 10pt#;

% parameters

% u# -> basic character unit
% cap# -> height of characters (no higher ascenders)
% desc# -> depth of descenders
% xheight# -> height of lowercase characters (without descenders)
% s# -> sidebars left/right of character
% o# -> vertical/horizontal overshoot for rounded character edges
% xgap# -> shortening for x-strokes, as in F
% ygap# -> vertical gap for stroke endings, as in C or e
% barheight# -> height of H-bar relative to cap#
% ebarheight# -> height of e-bar relative to xheight#

% penx# -> pen width
% peny# -> pen height
% penangle -> angle of pen

% slant:=0; -> slanting for italicizing typefaces
% overdraw# -> serifizing by "over"-drawing characters edges

slant:=0;
u#:=3/9pt#; cap#:=9pt#; desc#:=2.25pt#; xheight#:=.7cap#;
s#:=2u#; o#:=1/18pt#;
xgap#:=u#; ygap#:=3u#; barheight#:=.5*cap#; ebarheight#:=.5xheight#; overdraw#:=0;
leftstemloc#:=s#;
penx#:=1.1pt#; peny#:=0.35pt#; penangle:=0;

% setup font, pixels and pen(s)
mode_setup;
define_pixels(u,cap,desc,xheight,s,xgap,ygap,overdraw);
define_corrected_pixels(o);
define_blacker_pixels(penx,peny);
pickup pencircle xscaled penx yscaled peny rotated penangle; dof_pen:=savepen;
define_good_y_pixels(barheight,ebarheight);
define_good_x_pixels(leftstemloc);

% dof char method
def begindofchar(expr code,width_in_units,height,desc) = 
  beginchar(code,width_in_units*u#+2*s#,height,desc);
  pickup dof_pen; enddef;

% slant
if unknown slant: slant:=0 else: currenttransform:=
  identity slanted slant fi;

% draw characters
input dof-1-charu; % DOF uppercase characters
input dof-1-charl; % DOF lowercase characters
% input dof-1-byproduct; % DOF by-product characters

bye